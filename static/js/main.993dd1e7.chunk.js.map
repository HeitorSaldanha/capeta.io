{"version":3,"sources":["pentagram.svg","satan-name/satan-name.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SatanName","props","state","prefix","name","prefixos","Math","floor","random","length","nomes","nome","this","setState","getQuote","Container","src","Pentagram","alt","style","maxWidth","margin","onClick","className","Card","background","color","fontSize","borderCornerShape","borderRadius","Body","Text","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,uC,2PCStBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,KAAM,IAJS,E,uDASjB,IAAID,EAASE,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAASN,OAC/DC,EAAOM,EAAMJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAMD,SAASE,KAC3DC,KAAKC,UAAS,iBACZ,CACEV,SACAC,a,0CAMJQ,KAAKE,a,+BAGG,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,KACE,yBACEC,IAAKC,IACLC,IAAI,aACJC,MAAO,CACLC,SAAU,MACVC,OAAQ,QAEVC,QAAS,kBAAM,EAAKR,cAEtB,yBAAKS,UAAU,8BACb,kBAACC,EAAA,EAAD,CACEL,MAAO,CACLM,WAAY,UACZC,MAAO,QACPC,SAAU,OACVC,kBAAmB,QACnBC,aAAc,SAGhB,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,KAAN,KACE,2BAEEnB,KAAKV,MAAMC,QAGb,6BAEES,KAAKV,MAAME,KARf,a,GA/CyB4B,IAAMC,WCM9BC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCEcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.993dd1e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pentagram.67d7ad84.svg\";","import React from 'react';\r\nimport nomes from '../nomes.json';\r\nimport prefixos from '../prefixos.json';\r\n\r\nimport Pentagram from '../pentagram.svg';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default class SatanName extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      prefix: '',\r\n      name: ''\r\n    };\r\n  }\r\n\r\n  getQuote() {\r\n    let prefix = prefixos[Math.floor(Math.random() * prefixos.length)].prefix;\r\n    let name = nomes[Math.floor(Math.random() * nomes.length)].nome;\r\n    this.setState(() => (\r\n      {\r\n        prefix,\r\n        name\r\n      }\r\n    ));\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getQuote();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <img\r\n          src={Pentagram}\r\n          alt=\"Pentagrama\"\r\n          style={{\r\n            maxWidth: '30%',\r\n            margin: '40px',\r\n          }}\r\n          onClick={() => this.getQuote()}\r\n        />\r\n        <div className=\"row justify-content-center\">\r\n          <Card\r\n            style={{\r\n              background: \"#c41b21\",\r\n              color: \"black\",\r\n              fontSize: '40px',\r\n              borderCornerShape: 'scoop',\r\n              borderRadius: '30px'\r\n            }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <b>\r\n                {\r\n                  this.state.prefix\r\n                }\r\n                </b>\r\n                <br/>\r\n                {\r\n                  this.state.name\r\n                }!\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}","import './App.css';\nimport React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport SatanName from './satan-name/satan-name';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SatanName/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}